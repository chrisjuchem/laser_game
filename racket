(require 2htdp/image)
(require 2htdp/universe)

;DATA

; A GameState (GS) is one of
; - A World
; - (make-end 'death Number World)
; - (make-end 'win Number)
(define-struct end (state time world))

; A World is [Listof GO]

; A GameObject (GO) is one of:
; - Player
; - Enemy
; - Border
; - Beam

; A Player is a (make-player Posn Number Number)
; where posn is the location of the center of the player
; where ang is the direction facing in degrees CCW from the right
; where size is the player's radius
(define-struct player (posn ang size))

; An Enemy is a (make-enemy Posn Number Number)
; where posn is the location of the center of the enemy
; where ang is the direction facing in degrees CCW from the right
; where size is the enemy's radius
(define-struct enemy (posn ang size))

; A BorderType (BT) is one of
; - 'hard
; - 'soft
; where beams can travel through soft borders
; but players and enemies cannot

; A Border is a (make-border BT [Listof Posn] Number)
; where connecting the points in order forms the border,
; (length points) >= 2
; and size is the thickness of the border
(define-struct border (type points size))

; A Beam is a (make-beam Color [Listof Posn] Number Number)
; where connecting the points in order (starting from the end) forms the beam
; (length points) >= 1
; size is the thickness of the beam
; and dir is the direction in degrees CCW from the right that the next segment
;      of the beam will travel
(define-struct beam (color points size dir))

;A Segment is a (make-seg Posn Posn)
(define-struct seg (from to))

;A [Pair X Y] is a (make-pair X Y)
(define-struct pair (x y))

;===============================================================================

;CONSTANTS

(define GAME-WIDTH 800)
(define GAME-HEIGHT 600)
(define BG (empty-scene GAME-WIDTH GAME-HEIGHT))

(define MAX-BEAM-LENGTH 8)
(define BEAM-HOLD-TIME 15)
(define BEAM-SIZE 3)

(define FRIENDLY-COLOR 'cyan)
(define ENEMY-COLOR 'red)

(define HARD-COLOR 'black)
(define SOFT-COLOR 'gray)

(define PLAYER-MOVEMENT 3)
(define PLAYER-ANGLE-ADJUST 5)

(define BETWEEN-LEVEL-TIME 60)

(define LEVEL (list (make-border 'hard
                                 (list (make-posn (- GAME-WIDTH 25) 25)
                                       (make-posn (- GAME-WIDTH 25)
                                                  (- GAME-HEIGHT 25))
                                       (make-posn 25 (- GAME-HEIGHT 25))
                                       (make-posn 25 25)
                                       (make-posn (- GAME-WIDTH 25) 25))
                                 8)))

;; LEVELS

;; TEST LEVEL where player is in view from start
(define TEST (append (list (make-player (make-posn 300 300) 0 10)
                           (make-enemy (make-posn 500 300) 180 10))
                     LEVEL))
(define LEVEL1 (append (list (make-player (make-posn 75 40) 0 10)
                             (make-enemy (make-posn 350 550) 90 15) 
                             (make-enemy (make-posn 550 100) 200 15)
                             (make-enemy (make-posn 650 400) 160 25)
                             (make-border 'hard (list (make-posn 550 25)
                                                      (make-posn 425 95)) 4)
                             (make-border 'hard (list (make-posn 300 575)
                                                      (make-posn 300 300)
                                                      (make-posn 340 470)) 4)
                             (make-border 'hard (list (make-posn 400 575)
                                                      (make-posn 400 300)
                                                      (make-posn 360 470)) 4)
                             (make-border 'soft (list (make-posn 25 250)
                                                      (make-posn 100 250)
                                                      (make-posn 100 25)) 4))
                     LEVEL))
(define LEVEL2 (append (list (make-player (make-posn 75 75) 0 10)
                             (make-enemy (make-posn 725 75) 180 10)
                             (make-border 'hard (list (make-posn 225 275)
                                                      (make-posn 225 575)) 4)
                             (make-border 'hard (list (make-posn 325 25)
                                                      (make-posn 325 275)) 4)
                             (make-border 'hard (list (make-posn 425 275)
                                                      (make-posn 425 575)) 4)
                             (make-border 'hard (list (make-posn 525 25)
                                                      (make-posn 525 275)) 4)
                             (make-border 'hard (list (make-posn 625 275)
                                                      (make-posn 625 575)) 4)
                             (make-border 'soft (list (make-posn 225 275)
                                                      (make-posn 325 275)) 4))
                       LEVEL))
(define LEVEL3 (append (list (make-player (make-posn 725 500) 180 10)
                             (make-enemy (make-posn 400 500) 45 10)
                             (make-enemy (make-posn 100 225) 60 20)
                             (make-enemy (make-posn 300 350) 0 5)
                             (make-border 'hard (list (make-posn 400 400)
                                                      (make-posn 375 525)
                                                      (make-posn 425 525)
                                                      (make-posn 465 475)) 4)
                             (make-border 'hard (list (make-posn 60 250)
                                                      (make-posn 80 100)) 4)
                             (make-border 'hard (list (make-posn 140 250)
                                                      (make-posn 180 150)) 4)
                             (make-border 'soft (list (make-posn 485 575)
                                                      (make-posn 485 25)) 4))
                       LEVEL))
(define LEVEL4 (append (list (make-player (make-posn 200 550) 90 10)
                             (make-enemy (make-posn 200 70) 325 10)
                             (make-enemy (make-posn 700 275) 180 15)
                             (make-enemy (make-posn 675 500) 180 10)
                             (make-border 'hard (list (make-posn 100 75)
                                                      (make-posn 250 150)) 4)
                             (make-border 'hard (list (make-posn 550 25)
                                                      (make-posn 650 100)) 4)
                             (make-border 'hard (list (make-posn 575 200)
                                                      (make-posn 475 400)) 4)
                             (make-border 'hard (list (make-posn 525 575)
                                                      (make-posn 625 510)) 4))
                       LEVEL))
(define levels (list LEVEL1 LEVEL2 LEVEL3 LEVEL4))

;===============================================================================

;IMAGE FUNCTIONS

;place-image-posn : Image Posn Image -> Image
(define (place-image-posn i1 p i2)
  (place-image i1
               (posn-x p)
               (posn-y p)
               i2))


;player-img : Player -> Image
(define (player-img p)
  (rotate (- (player-ang p) 90)
          (overlay/align/offset 'middle 'top
                                (triangle (player-size p) 'solid 'black)
                                0 -1
                                (circle (player-size p) 'outline 'black))))
          
;enemy-img : Enemy -> Image
(define (enemy-img e)
  (rotate (- (enemy-ang e) 90)
          (overlay/align/offset 'middle 'top
                                (triangle (enemy-size e) 'solid 'black)
                                0 -1
                                (overlay (circle (enemy-size e) 'outline 'black)
                                         (circle (enemy-size e) 'solid 'red)))))


;add-seg : Segment Color Number Image -> Image
(define (add-seg s c sz bg)
  (local ((define x1 (posn-x (seg-from s)))
          (define y1 (posn-y (seg-from s)))
          (define x2 (posn-x (seg-to s)))
          (define y2 (posn-y (seg-to s)))
          ;(define avg (make-posn (/ (+ x1 x2) 2) (/ (+ y1 y2) 2)))
          )
    (add-line bg x1 y1 x2 y2
              (make-pen c sz 'solid 'round 'round))))

;draw-lop: [Listof Posn] Color Number Image -> Image
(define (draw-lop pts c sz bg)
  (cond
    [(> (length pts) 1)
     (draw-lop (rest pts) c sz
               (add-seg (make-seg (first pts) (second pts))
                        c sz bg))]
    [else bg]))


;draw-players : World Image -> Image
;draws all players in the world on the given image
(define (draw-players w bg)
  (foldr (λ (go img) (if (player? go)
                         (place-image-posn (player-img go)
                                           (player-posn go)
                                           img)
                         img))
         bg
         w))

;draw-enemies : World Image -> Image
;draws all enemies in the world on the given image
(define (draw-enemies w bg)
  (foldr (λ (go img) (if (enemy? go)
                         (place-image-posn (enemy-img go)
                                           (enemy-posn go)
                                           img)
                         img))
         bg
         w))

;draw-borders : World Image -> Image
;draws all borders in the world on the given image
(define (draw-borders w bg)
  (foldr (λ (go img) (if (border? go)
                         (draw-lop (border-points go)
                                   (if (symbol=? (border-type go) 'hard)
                                       HARD-COLOR
                                       SOFT-COLOR)
                                   (border-size go)
                                   img)
                         img))
         bg
         w))

;draw-beam : World Image -> Image
;draws all borders in the world on the given image
(define (draw-beams w bg)
  (foldr (λ (go img) (if (beam? go)
                         (draw-lop (beam-points go)
                                   (beam-color go)
                                   (beam-size go)
                                   img)
                         img))
         bg
         w))

;Uses 0,0 as the top left
;draw : GS -> Image
(define (draw w)
  (overlay (cond [(list? w) empty-image]
                 [(symbol=? (end-state 'death)) (text "YOU LOSE" 'black 60)]
                 [else (text "YOU WIN" 'black 60)])
           (draw-borders w (draw-enemies w (draw-players w (draw-beams w BG))))))

;===============================================================================

;lop->los : [Listof Posn] -> [Listof Seg]
(define (lop->los lop)
  (cond
    [(> (length lop) 1) (cons (make-seg (first lop) (second lop))
                              (lop->los (rest lop)))]
    [else empty]))

;all-hard-borders: World -> [Listof Seg]
(define (all-hard-borders w)
  (foldr (λ (go l) (if (and (border? go)
                            (symbol=? (border-type go) 'hard))
                       (append (lop->los (border-points go)) l)
                       l))
         empty
         w))

;intersect? : Seg Seg -> Boolean
(define (intersect? s1 s2)
  (local ((define a (posn-x (seg-from s1)))
          (define b (posn-y (seg-from s1)))
          (define c (- (posn-x (seg-to s1)) a))
          (define d (- (posn-y (seg-to s1)) b))
          (define e (posn-x (seg-from s2)))
          (define f (posn-y (seg-from s2)))
          (define g (- (posn-x (seg-to s2)) e))
          (define h (- (posn-y (seg-to s2)) f))
          (define det (- (* g d) (* c h))))
    (if (zero? det)
        false
        (local ((define t (/ (- (* g (- f b)) (* (- e a) h)) det))
                (define s (/ (- (* c (- f b)) (* (- e a) d)) det)))
          (and (<= t 1) (>= t 0) (<= s 1) (>= s 0))))))
(check-expect
 (intersect? (make-seg (make-posn 10 2) (make-posn 6 2))
             (make-seg (make-posn 8 1) (make-posn 6 4))) true)
(check-expect
 (intersect? (make-seg (make-posn 0 0) (make-posn 20 20))
             (make-seg (make-posn 0 1) (make-posn 21 20))) true)
(check-expect
 (intersect? (make-seg (make-posn 10 2) (make-posn 6 2))
             (make-seg (make-posn 0 0) (make-posn 6 6))) false)
             
                
  
;blocked? Segment World -> Boolean
(define (blocked? seg w)
  (ormap (λ(go) (if (and (border? go) (symbol=? (border-type go) 'hard))
                    (ormap (λ(s) (intersect? seg s))
                           (lop->los (border-points go)))
                    false))
         w))
   
;extend-beams : World -> World
(define (extend-beams w)
  (map (λ (go) (if (beam? go)
                   (if (> (length (beam-points go)) MAX-BEAM-LENGTH)
                       (make-beam (beam-color go)
                                  (cons (first (beam-points go))
                                        (beam-points go))
                                  (beam-size go)
                                  (beam-dir go))
                       (extend-beam go w))
                   go))
       w))

;extend-beam : Beam World -> Beam
(define (extend-beam b w)
  (local ((define diry (- 0 (sin (/ (* (beam-dir b) pi) 180))))
          (define dirx (cos (/ (* (beam-dir b) pi) 180)))
          
          ;intersects : Segment -> [Pair Number Beam] or false
          ;uses matrices to determine if the beam intersects a segment
          (define (intersects? seg)
            (local ((define b1x (posn-x (seg-to seg)))
                    (define b2x (posn-x (seg-from seg)))
                    (define b1y (posn-y (seg-to seg)))
                    (define b2y (posn-y (seg-from seg)))
                    (define brdy (- b1y b2y))
                    (define brdx (- b1x b2x))
                    (define det (- (* diry brdx) (* dirx brdy))))
              (if (zero? det)
                  false
                  (local ((define a (- b2y (posn-y (first (beam-points b)))))
                          (define c (- b2x (posn-x (first (beam-points b)))))
                          (define s (/ (- (* dirx a) (* diry c)) det))
                          (define t (/ (- (* brdx a) (* brdy c)) det)))
                    (if (and (>= t 1) (<= s 1) (>= s 0))
                        (make-pair
                         t
                         (make-beam
                          (beam-color b)
                          (cons
                           (make-posn (+ (posn-x (first (beam-points b)))
                                         (* t dirx))
                                      (+ (posn-y (first (beam-points b)))
                                         (* t diry)))
                           (beam-points b))
                          (beam-size b)
                          ;new dir using Pu(v)
                          (local ((define ux brdy)
                                  (define uy (- 0 brdx))
                                  (define vx dirx)
                                  (define vy diry)
                                  (define uv/uu (/ (+ (* ux vx) (* uy vy))
                                                   (+ (* ux ux) (* uy uy))))
                                  (define y (- (* 2 uv/uu uy) vy))
                                  (define x (- vx (* 2 uv/uu ux))))
                            (+ (if (< x 0) 180 0)
                               (* (atan (/ y x))
                                  (/ 180 pi))))))
                         false)))))
          (define result (foldr (λ (seg beam)
                                  (local ((define res (intersects? seg)))
                                    (cond
                                      [(false? res) beam]
                                      [(or (false? beam) 
                                           (< (pair-x res) (pair-x beam))) res]
                                      [else beam])))
                                false
                                (all-hard-borders w))))
        (if (false? result)
            b
            (pair-y result))))

;clear-beams: World -> World
(define (clear-beams w)
  (foldr (λ (go l) (if (and (beam? go)
                            (> (length (beam-points go)) (+ MAX-BEAM-LENGTH
                                                            BEAM-HOLD-TIME)))
                       l   
                       (cons go l)))
         empty
         w))

;; ENEMY FUNCTIONS

;; player-in-view?: Enemy World -> Boolean
(define (player-in-view? e w)
  (ormap (λ(x) (and (player? x)
                    (<= (abs (- (atan (- (posn-y (player-posn x))
                                         (posn-y (enemy-posn e)))
                                      (- (posn-x (player-posn x))
                                         (posn-x (enemy-posn e))))
                                (* (/ pi 180) (enemy-ang e))))
                        15)
                    (not (blocked? (make-seg (player-posn x)
                                             (enemy-posn e)) w))))
                   
         w))

(check-expect (player-in-view? (make-enemy (make-posn 420 69) 160 25) LEVEL1)
              true)

;; enemy-fire : World -> World
(define (enemy-fire w)
  (local ((define COMPLETE-WORLD w)
          (define (help w)
            (cond
              [(empty? w) w]
              [else (if (and (enemy? (first w))
                             (player-in-view? (first w) COMPLETE-WORLD))
                        (cons (make-beam ENEMY-COLOR
                                         (list (enemy-posn (first w)))
                                         BEAM-SIZE
                                         (enemy-ang (first w)))
                              (cons (first w) (help (rest w))))
                        (cons (first w) (help (rest w))))])))
    (help w)))

;; enemies-die : World -> World
(define (enemies-die w)
  (local ((define COMPLETE-WORLD w)
          (define (help w)
            (cond
              [(empty? w) w]
              [else (if (and (enemy? (first w))
                             (enemy-beam-collisions? (first w) COMPLETE-WORLD))
                        (help (rest w))
                        (cons (first w) (rest w)))])))
    (help w)))

;; enemy-beam-collisions? : Enemy World -> Boolean
(define (enemy-beam-collisions? e w)
  (ormap (λ(x)
           (and (beam? x)
                (symbol=? (beam-color x) FRIENDLY-COLOR)
                (beam-collision? (enemy-posn e) (beam-points x))))
         w))

;; beam-collision? : Posn [Listof Posns] -> Boolean
(define (beam-collision? p b)
  (cond
    [(empty? b) false]
    [else (if (local ((define SLOPE1 (/ (- (posn-y (second b)) (posn-y (first b)))
                                        (- (posn-x (second b)) (posn-x (first b)))))
                      (define SLOPE2 (/ (- (posn-y p) (posn-y (first b)))
                                        (- (posn-x p) (posn-x (first b))))))
                (= SLOPE1 SLOPE2))
              true
              (beam-collision? (rest b)))]))


;; PLAYER FUNCTIONS

; move-forward : Posn Number Number -> Posn
(define (move-forward posn ang dist)
   (make-posn
    (+ (posn-x posn) (* (cos (deg-to-rad ang)) dist))
    (- (posn-y posn) (* (sin (deg-to-rad ang)) dist))))

; move-backward : Posn Number Number -> Posn
(define (move-backward posn ang dist)
   (make-posn
    (- (posn-x posn) (* (cos (deg-to-rad ang)) dist))
    (+ (posn-y posn) (* (sin (deg-to-rad ang)) dist))))
                         


; converts number in degrees to radians
; deg-rad : Number -> Number
(define (deg-to-rad num)
  (* num (/ pi 180)))

;; player-die : World -> World
(define (player-die w)
  (local ((define COMPLETE-WORLD w)
          (define (help w)
            (cond
              [(empty? w) w]
              [else (if (and (player? (first w))
                             (player-beam-collisions? (first w) COMPLETE-WORLD))
                        (make-end 'death 0 w)
                        (cons (first w) (rest w)))])))
    (help w)))

;; player-beam-collisions? : Player World -> Boolean
(define (player-beam-collisions? p w)
  (ormap (λ(x)
           (and (beam? x)
                (symbol=? (beam-color x) ENEMY-COLOR)
                (beam-collision? (player-posn p) (beam-points x))))
         w))

;; BIG BANG FUNCTIONS

(define (key w ke)
  (if (symbol? w)
      w
      (cond
        [(key=? ke "up") (map (λ (x) (if (player? x) (make-player
                                                           (move-forward (player-posn x) (player-ang x) PLAYER-MOVEMENT)
                                                           (player-ang x) (player-size x))
                                  x)) w)]
        [(key=? ke "down") (map (λ (x) (if (player? x) (make-player
                                                           (move-backward (player-posn x) (player-ang x) PLAYER-MOVEMENT)
                                                           (player-ang x) (player-size x))
                                  x)) w)]
        [(key=? ke "left") (map (λ (x) (if (player? x) (make-player (player-posn x)
                                                                         (+ (player-ang x) PLAYER-ANGLE-ADJUST)
                                                                         (player-size x))
                                                                         x)) w)]
        [(key=? ke "right") (map (λ (x) (if (player? x) (make-player (player-posn x)
                                                                          (- (player-ang x) PLAYER-ANGLE-ADJUST)
                                                                          (player-size x))
                                                                          x)) w)]
        [(key=? ke " ") (foldr (λ (go l) (if (player? go)
                                              (cons (make-beam FRIENDLY-COLOR (list (player-posn go)) BEAM-SIZE (player-ang go))
                                                    (cons go l))
                                              (cons go l)))
                                empty
                                w)]
        [else w])))

;tick : GS -> GS
(define (tick w)
  (if (end? w)
      (cond
        [(and (= (end-time w) 0) (symbol=? (end-state w) 'win))
         (list-ref levels (random (length levels)))]
        [else (make-end (end-state w) (- (end-time w)))])
      #|TODO|#(clear-beams (extend-beams (enemy-fire w)))))

;===============================================================================

(big-bang TEST;(list-ref levels (random (length levels)))
          (on-tick tick 1/15)
          (on-key key)
          (to-draw draw))
